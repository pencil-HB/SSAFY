package com.mvc.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.mvc.service.MemberService;
import com.mvc.vo.Member;

import jakarta.servlet.http.HttpSession;

@Controller
public class MemberController {
	@Autowired
	MemberService service;

	@GetMapping(value = "/loginForm")
	public String login() { // 로그인 화면
		return "loginForm";// view name
	}

	@PostMapping(value = "/loginProcess")
	public String login2(HttpSession session, @RequestParam("id") String id, @RequestParam("pass") String pass,
			@RequestParam(value = "admin", required = false) String admin, RedirectAttributes ra) throws Exception {// id, pass 받아와서 db에 가서 체크 한
																							// 후에 세션에 저장

		Member user = new Member(id, pass);
		user = service.check(user);
		
		String url = "list";// ok

		if (user != null) {// 로그인 성공

			if (admin != null) {
				session.setAttribute("admin", "yes");
			} else {
				session.setAttribute("admin", "no");
			}

			session.setAttribute("user", user);
			/*
			 * cookie 처리--------------- if (remember != null) {// 체크박스 체크한 경우 Cookie remem =
			 * new Cookie("remem", id); remem.setMaxAge(-1); response.addCookie(remem);
			 * 
			 * } else {// 체크박스 푼 경우 // 유효하지 않은 쿠키로 설정하기 Cookie cookie = new Cookie("remem",
			 * ""); cookie.setMaxAge(0); // 유효하지 않은 쿠키 response.addCookie(cookie); }
			 */
		} else { // 로그인 실패
			// 세션을 이용하기 때문. 단, 1회용이기 때문에 redirect 된후 사라진다.전달된 Parameter는 URL에 노출되지 않는다.post
			// 형식으로
			ra.addFlashAttribute("errormsg", "ID/PW를 확인해 주세요!");// 바로 ${errormsg}로 꺼내서 씀.addFlashAttribute 의 경우 데이타가
																// post 형식으로 전달이 된다.
			// ra.addAttribute("errormsg", "ID/PW를 입력해 주세요!");// 데이타가 URI에 노출. param으로 전달됨
			// ${param.errormsg}. get
			url = "loginForm";
		}

		return "redirect:/" + url;// view name
	}

	@GetMapping(value = "/logout")
	public String logout(HttpSession session) {// 세션에t
		session.setAttribute("user", null);
		session.setAttribute("admin", null);

		return "redirect:/list";// view name
	}
	
	// 회원가입 폼 이동
    @GetMapping("/singUp")
    public String showRegisterForm() {
        return "singUp";
    }

    @PostMapping("/register")
    public String register(Member member, RedirectAttributes redirectAttributes) {
        boolean success = service.registerMember(member);
        if (success) {
            redirectAttributes.addFlashAttribute("message", "회원가입이 완료되었습니다.");
            return "redirect:/login"; // 회원가입 후 로그인 페이지로 이동
        } else {
            redirectAttributes.addFlashAttribute("message", "회원가입에 실패했습니다. 다시 시도해 주세요.");
            return "redirect:/member/register";
        }
    }
}
